(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.HistogramCanvas = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var defaultOptions = {
  x: null,
  y: null,
  width: null,
  height: null,
  red: true,
  green: true,
  blue: true,
  redColor: '#FF0000',
  greenColor: '#00FF00',
  blueColor: '#0000FF',
  compositeOperation: 'screen'
};

var HistogramCanvas = function () {
  /**
   * Create new HistogramCanvas
   *
   * @param canvas The canvas to draw the histogram on
   * @param options {object} Options to initialize
   */
  function HistogramCanvas(canvas, options) {
    _classCallCheck(this, HistogramCanvas);

    this._canvas = canvas;
    this._ctx = canvas.getContext('2d');
    this._data = null;

    for (var key in defaultOptions) {
      if (!defaultOptions.hasOwnProperty(key)) continue;
      this[key] = options && options[key] || defaultOptions[key];
    }
  }

  /**
   * Redraw the histogram
   *
   * @param data {object} Histogram data with red, green, and blue properties,
   *             each arrays of 256 integers
   * @param dontClear {boolean} If true, the canvas won't be cleared
   */


  _createClass(HistogramCanvas, [{
    key: 'update',
    value: function update(data) {
      var dontClear = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      if (data) {
        this._data = data;
      }

      if (!this._data) {
        throw new Error('Histogram data is null');
      }

      if (this.red && !this._data.red || this.green && !this._data.green || this.blue && !this._data.blue) {
        throw new Error('Histogram data missing red, green, or blue component');
      }

      this._ctx.globalCompositeOperation = this.compositeOperation;
      if (!dontClear) {
        this._ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);
      }
      var max = Math.max.apply(null, data.red.concat(data.green, data.blue));

      if (this.red) {
        this._drawColorGraph(max, data.red, this.redColor);
      }
      if (this.green) {
        this._drawColorGraph(max, data.green, this.greenColor);
      }
      if (this.blue) {
        this._drawColorGraph(max, data.blue, this.blueColor);
      }
    }
  }, {
    key: '_drawColorGraph',
    value: function _drawColorGraph(max, vals, color) {
      var graphHeight = this.height || this._canvas.height;
      var graphWidth = this.width || this._canvas.width;
      var graphX = this.x || 0;
      var graphY = this.y || this._canvas.height;

      var ctx = this._ctx;
      ctx.fillStyle = color;
      ctx.beginPath();
      ctx.moveTo(graphX, graphHeight);
      for (var i = 0; i < vals.length; i++) {
        var val = vals[i];
        var drawHeight = Math.round(val / max * graphHeight);
        var drawX = graphX + graphWidth / (vals.length - 1) * i;
        ctx.lineTo(drawX, graphY - drawHeight);
      }
      ctx.lineTo(graphX + graphWidth, graphY);
      ctx.closePath();
      ctx.fill();
    }
  }]);

  return HistogramCanvas;
}();

module.exports = HistogramCanvas;
},{}]},{},[1])(1)
});